import subprocess
import os
import json
import time
import multiprocessing
from concurrent.futures import ThreadPoolExecutor, as_completed

def get_video_info(video_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ffprobe"""
    cmd = [
        'ffprobe',
        '-v', 'quiet',
        '-print_format', 'json',
        '-show_streams',
        video_path
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        info = json.loads(result.stdout)
        video_stream = next(s for s in info['streams'] if s['codec_type'] == 'video')
        return {
            'width': int(video_stream['width']),
            'height': int(video_stream['height']),
            'fps': eval(video_stream['r_frame_rate'])
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ {video_path}: {e}")
        return None

def process_single_video(args):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    input_video, input_videos_dir, ending_video_path, output_videos_dir, index, total = args
    
    try:
        input_video_path = os.path.join(input_videos_dir, input_video)
        output_video_path = os.path.join(output_videos_dir, f"merged_{input_video}")
        
        print(f"\nüé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ [{index}/{total}]: {input_video}")
        start_time = time.time()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        main_video_info = get_video_info(input_video_path)
        if not main_video_info:
            return False, input_video, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_ending = os.path.join(output_videos_dir, f"temp_ending_{os.path.splitext(input_video)[0]}.mp4")
        temp_input = os.path.join(output_videos_dir, f"temp_input_{os.path.splitext(input_video)[0]}.mp4")

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã FFmpeg
        threads = multiprocessing.cpu_count()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ü–æ–≤–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        scale_cmd = [
            'ffmpeg', '-y',
            '-i', ending_video_path,
            '-vf', f'scale={main_video_info["width"]}:{main_video_info["height"]}',
            '-r', str(main_video_info["fps"]),
            '-c:v', 'libx264',
            '-preset', 'ultrafast',  # –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –ø—Ä–µ—Å–µ—Ç
            '-tune', 'fastdecode',
            '-threads', str(threads),
            '-c:a', 'aac',
            '-b:a', '128k',  # –£–º–µ–Ω—å—à–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
            temp_ending
        ]
        subprocess.run(scale_cmd, check=True, capture_output=True)

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        input_cmd = [
            'ffmpeg', '-y',
            '-i', input_video_path,
            '-c:v', 'libx264',
            '-preset', 'ultrafast',
            '-tune', 'fastdecode',
            '-threads', str(threads),
            '-c:a', 'aac',
            '-b:a', '128k',
            temp_input
        ]
        subprocess.run(input_cmd, check=True, capture_output=True)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
        concat_file = os.path.join(output_videos_dir, f"concat_list_{os.path.splitext(input_video)[0]}.txt")
        with open(concat_file, 'w', encoding='utf-8') as f:
            f.write(f"file '{temp_input}'\n")
            f.write(f"file '{temp_ending}'\n")

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        concat_cmd = [
            'ffmpeg', '-y',
            '-f', 'concat',
            '-safe', '0',
            '-i', concat_file,
            '-c:v', 'libx264',
            '-preset', 'ultrafast',
            '-tune', 'fastdecode',
            '-threads', str(threads),
            '-c:a', 'aac',
            '-b:a', '128k',
            output_video_path
        ]
        subprocess.run(concat_cmd, check=True, capture_output=True)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(temp_ending)
        os.remove(temp_input)
        os.remove(concat_file)
        
        processing_time = time.time() - start_time
        print(f"‚úì –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {format_time(processing_time)}")
        
        return True, input_video, processing_time
        
    except Exception as e:
        return False, input_video, str(e)

def add_ending_to_videos(input_videos_dir, ending_video_path, output_videos_dir):
    input_videos_dir = os.path.normpath(input_videos_dir)
    ending_video_path = os.path.normpath(ending_video_path)
    output_videos_dir = os.path.normpath(output_videos_dir)

    try:
        os.makedirs(output_videos_dir, exist_ok=True)
    except OSError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {output_videos_dir}: {e}")
        return

    try:
        input_videos = [f for f in os.listdir(input_videos_dir)
                       if os.path.isfile(os.path.join(input_videos_dir, f))
                       and f.lower().endswith(('.mp4', '.mov', '.avi'))
                       and f.lower() != "ending.mp4"]
        input_videos.sort()
    except OSError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {input_videos_dir}: {e}")
        return

    total_videos = len(input_videos)
    print(f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_videos}")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    max_workers = min(multiprocessing.cpu_count(), total_videos)
    args_list = [(video, input_videos_dir, ending_video_path, output_videos_dir, i+1, total_videos) 
                 for i, video in enumerate(input_videos)]

    successful = 0
    failed = 0
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = [executor.submit(process_single_video, args) for args in args_list]
        
        for future in as_completed(futures):
            success, video_name, result = future.result()
            if success:
                successful += 1
            else:
                failed += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {video_name}: {result}")

    print(f"\nüìä –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"   ‚úì –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
    if failed > 0:
        print(f"   ‚ùå –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {failed}")

def format_time(seconds):
    if seconds < 60:
        return f"{seconds:.1f} —Å–µ–∫"
    minutes = seconds // 60
    seconds = seconds % 60
    return f"{int(minutes)} –º–∏–Ω {int(seconds)} —Å–µ–∫"

if __name__ == "__main__":
    print("–≠—Ç–æ—Ç —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥—É–ª–µ–º –∏ –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
